// Code generated by protoc-gen-go. DO NOT EDIT.
// source: DetectorService.proto

/*
Package detectorservice is a generated protocol buffer package.

It is generated from these files:
	DetectorService.proto

It has these top-level messages:
	Sample
	DetectionResult
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Sample struct {
	Data     []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	CallId   string `protobuf:"bytes,2,opt,name=callId" json:"callId,omitempty"`
	CallDate string `protobuf:"bytes,3,opt,name=callDate" json:"callDate,omitempty"`
}

func (m *Sample) Reset()                    { *m = Sample{} }
func (m *Sample) String() string            { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()               {}
func (*Sample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Sample) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Sample) GetCallId() string {
	if m != nil {
		return m.CallId
	}
	return ""
}

func (m *Sample) GetCallDate() string {
	if m != nil {
		return m.CallDate
	}
	return ""
}

type DetectionResult struct {
	IsAnswerMachine bool `protobuf:"varint,1,opt,name=isAnswerMachine" json:"isAnswerMachine,omitempty"`
}

func (m *DetectionResult) Reset()                    { *m = DetectionResult{} }
func (m *DetectionResult) String() string            { return proto.CompactTextString(m) }
func (*DetectionResult) ProtoMessage()               {}
func (*DetectionResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DetectionResult) GetIsAnswerMachine() bool {
	if m != nil {
		return m.IsAnswerMachine
	}
	return false
}

func init() {
	proto.RegisterType((*Sample)(nil), "detectorservice.Sample")
	proto.RegisterType((*DetectionResult)(nil), "detectorservice.DetectionResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DetectorService service

type DetectorServiceClient interface {
	DetectAnswerMachine(ctx context.Context, opts ...grpc.CallOption) (DetectorService_DetectAnswerMachineClient, error)
}

type detectorServiceClient struct {
	cc *grpc.ClientConn
}

func NewDetectorServiceClient(cc *grpc.ClientConn) DetectorServiceClient {
	return &detectorServiceClient{cc}
}

func (c *detectorServiceClient) DetectAnswerMachine(ctx context.Context, opts ...grpc.CallOption) (DetectorService_DetectAnswerMachineClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DetectorService_serviceDesc.Streams[0], c.cc, "/detectorservice.DetectorService/DetectAnswerMachine", opts...)
	if err != nil {
		return nil, err
	}
	x := &detectorServiceDetectAnswerMachineClient{stream}
	return x, nil
}

type DetectorService_DetectAnswerMachineClient interface {
	Send(*Sample) error
	CloseAndRecv() (*DetectionResult, error)
	grpc.ClientStream
}

type detectorServiceDetectAnswerMachineClient struct {
	grpc.ClientStream
}

func (x *detectorServiceDetectAnswerMachineClient) Send(m *Sample) error {
	return x.ClientStream.SendMsg(m)
}

func (x *detectorServiceDetectAnswerMachineClient) CloseAndRecv() (*DetectionResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DetectionResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DetectorService service

type DetectorServiceServer interface {
	DetectAnswerMachine(DetectorService_DetectAnswerMachineServer) error
}

func RegisterDetectorServiceServer(s *grpc.Server, srv DetectorServiceServer) {
	s.RegisterService(&_DetectorService_serviceDesc, srv)
}

func _DetectorService_DetectAnswerMachine_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DetectorServiceServer).DetectAnswerMachine(&detectorServiceDetectAnswerMachineServer{stream})
}

type DetectorService_DetectAnswerMachineServer interface {
	SendAndClose(*DetectionResult) error
	Recv() (*Sample, error)
	grpc.ServerStream
}

type detectorServiceDetectAnswerMachineServer struct {
	grpc.ServerStream
}

func (x *detectorServiceDetectAnswerMachineServer) SendAndClose(m *DetectionResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *detectorServiceDetectAnswerMachineServer) Recv() (*Sample, error) {
	m := new(Sample)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DetectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "detectorservice.DetectorService",
	HandlerType: (*DetectorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DetectAnswerMachine",
			Handler:       _DetectorService_DetectAnswerMachine_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "DetectorService.proto",
}

func init() { proto.RegisterFile("DetectorService.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x75, 0x49, 0x2d, 0x49,
	0x4d, 0x2e, 0xc9, 0x2f, 0x0a, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x4f, 0x81, 0x0a, 0x17, 0x43, 0x84, 0x95, 0x02, 0xb8, 0xd8, 0x82, 0x13, 0x73,
	0x0b, 0x72, 0x52, 0x85, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b, 0x12, 0x25, 0x18, 0x15, 0x18, 0x35,
	0x78, 0x82, 0xc0, 0x6c, 0x21, 0x31, 0x2e, 0xb6, 0xe4, 0xc4, 0x9c, 0x1c, 0xcf, 0x14, 0x09, 0x26,
	0x05, 0x46, 0x0d, 0xce, 0x20, 0x28, 0x4f, 0x48, 0x8a, 0x8b, 0x03, 0xc4, 0x72, 0x49, 0x2c, 0x49,
	0x95, 0x60, 0x06, 0xcb, 0xc0, 0xf9, 0x4a, 0xd6, 0x5c, 0xfc, 0x10, 0xbb, 0x33, 0xf3, 0xf3, 0x82,
	0x52, 0x8b, 0x4b, 0x73, 0x4a, 0x84, 0x34, 0xb8, 0xf8, 0x33, 0x8b, 0x1d, 0xf3, 0x8a, 0xcb, 0x53,
	0x8b, 0x7c, 0x13, 0x93, 0x33, 0x32, 0xf3, 0x52, 0xc1, 0xb6, 0x70, 0x04, 0xa1, 0x0b, 0x1b, 0xa5,
	0xc3, 0x34, 0xc3, 0x1d, 0x2e, 0x14, 0xc2, 0x25, 0x0c, 0x11, 0x42, 0x51, 0x29, 0x24, 0xae, 0x87,
	0xe6, 0x15, 0x3d, 0x88, 0x3f, 0xa4, 0x14, 0x30, 0x24, 0xd0, 0x9c, 0xa3, 0xc4, 0xa0, 0xc1, 0xe8,
	0xa4, 0xc2, 0x25, 0x95, 0x9c, 0x9f, 0xab, 0x17, 0x6f, 0x51, 0x61, 0xa1, 0x97, 0x98, 0x9b, 0x02,
	0xd7, 0xa3, 0x97, 0x5e, 0x54, 0x90, 0x1c, 0xc0, 0xb8, 0x88, 0x89, 0xd9, 0xc3, 0x27, 0x3c, 0x89,
	0x0d, 0x1c, 0x6a, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x62, 0x37, 0xa7, 0x4e, 0x01,
	0x00, 0x00,
}
